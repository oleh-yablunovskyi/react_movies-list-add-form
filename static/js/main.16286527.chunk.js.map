{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","helpers/helpers.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","isValidUrl","url","test","TextField","React","memo","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","trim","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","newTitle","setNewTitle","newDescription","setNewDescription","newImgUrl","setNewImgUrl","newImdbUrl","setNewImdbUrl","newImdbId","setNewImdbId","isValidImgUrl","isValidImdbUrl","isAllFieldsValid","Boolean","handleFormSubmit","prevCount","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","addMovie","useCallback","newMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16286527.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","export function isValidUrl(url: string) {\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return pattern.test(url);\n}\n\nexport function getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { getRandomDigits } from '../../helpers/helpers';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isValidUrl?: boolean,\n};\n\nexport const TextField: React.FC<Props> = React.memo(\n  ({\n    name,\n    value,\n    label = name,\n    required = false,\n    onChange = () => {},\n    isValidUrl = true,\n  }) => {\n    const [id] = useState(() => `${name}-${getRandomDigits()}`);\n    const [touched, setToched] = useState(false);\n\n    const hasError = touched && required && !value.trim();\n\n    return (\n      <div className=\"field\">\n        <label className=\"label\" htmlFor={id}>\n          {label}\n        </label>\n\n        <div className=\"control\">\n          <input\n            id={id}\n            data-cy={`movie-${name}`}\n            className={classNames('input', {\n              'is-danger': hasError,\n            })}\n            type=\"text\"\n            placeholder={`Enter ${label}`}\n            value={value}\n            onChange={event => onChange(event.target.value)}\n            onBlur={() => setToched(true)}\n          />\n        </div>\n\n        {hasError && (\n          <p className=\"help is-danger\">{`${label} is required`}</p>\n        )}\n\n        {!isValidUrl && touched && (\n          <p className=\"help is-danger\">Invalid URL</p>\n        )}\n      </div>\n    );\n  },\n);\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { isValidUrl } from '../../helpers/helpers';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = React.memo(\n  ({ onAdd }) => {\n    const [count, setCount] = useState(0);\n    const [newTitle, setNewTitle] = useState('');\n    const [newDescription, setNewDescription] = useState('');\n    const [newImgUrl, setNewImgUrl] = useState('');\n    const [newImdbUrl, setNewImdbUrl] = useState('');\n    const [newImdbId, setNewImdbId] = useState('');\n\n    const isValidImgUrl = isValidUrl(newImgUrl);\n    const isValidImdbUrl = isValidUrl(newImdbUrl);\n\n    const isAllFieldsValid = (Boolean(\n      newTitle.trim()\n      && newImgUrl.trim()\n      && newImdbUrl.trim()\n      && newImdbId.trim()\n      && isValidImgUrl\n      && isValidImdbUrl,\n    ));\n\n    const clearForm = () => {\n      setNewTitle('');\n      setNewDescription('');\n      setNewImgUrl('');\n      setNewImdbUrl('');\n      setNewImdbId('');\n    };\n\n    const handleFormSubmit = () => {\n      if (!isAllFieldsValid) {\n        return;\n      }\n\n      const newMovie = {\n        title: newTitle,\n        description: newDescription,\n        imgUrl: newImgUrl,\n        imdbUrl: newImdbUrl,\n        imdbId: newImdbId,\n      };\n\n      onAdd(newMovie);\n\n      setCount((prevCount => prevCount + 1));\n\n      clearForm();\n    };\n\n    return (\n      <form\n        className=\"NewMovie\"\n        key={count}\n        onSubmit={(event) => {\n          event.preventDefault();\n          handleFormSubmit();\n        }}\n      >\n        <h2 className=\"title\">Add a movie</h2>\n\n        <TextField\n          name=\"title\"\n          label=\"Title\"\n          value={newTitle}\n          required\n          onChange={setNewTitle}\n        />\n\n        <TextField\n          name=\"description\"\n          label=\"Description\"\n          value={newDescription}\n          onChange={setNewDescription}\n        />\n\n        <TextField\n          name=\"imgUrl\"\n          label=\"Image URL\"\n          value={newImgUrl}\n          required\n          onChange={setNewImgUrl}\n          isValidUrl={isValidImgUrl}\n        />\n\n        <TextField\n          name=\"imdbUrl\"\n          label=\"Imdb URL\"\n          value={newImdbUrl}\n          required\n          onChange={setNewImdbUrl}\n          isValidUrl={isValidImdbUrl}\n        />\n\n        <TextField\n          name=\"imdbId\"\n          label=\"Imdb ID\"\n          value={newImdbId}\n          required\n          onChange={setNewImdbId}\n        />\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              data-cy=\"submit-button\"\n              className=\"button is-link\"\n              disabled={!isAllFieldsValid}\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  },\n);\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = useCallback((newMovie: Movie) => {\n    setMovies((prevMovies => (\n      [...prevMovies, newMovie]\n    )));\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}